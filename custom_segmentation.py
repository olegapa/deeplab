import segmentation_models_pytorch as smp
import torch
import torch.nn as nn

class CustomDeepLabV3Plus(smp.DeepLabV3Plus):
    def __init__(self, encoder_name="resnet50", num_classes=9, feature_dim=30):
        super().__init__(encoder_name=encoder_name, classes=num_classes)

        self.num_classes = num_classes
        self.feature_dim = feature_dim
        encoder_channels = self.encoder.out_channels[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–∫–æ–¥–µ—Ä–∞

        # üîπ 1. –£—Å—Ä–µ–¥–Ω—è–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.pool = nn.AdaptiveAvgPool2d(1)  # (B, encoder_channels, 1, 1)

        # üîπ 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º class_vectors –∏–∑ feature map
        self.fc_vectors = nn.Linear(encoder_channels, num_classes * feature_dim)  # (B, N_CLASSES * 30)

        # üîπ 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º class_probs –∏–∑ class_vectors
        self.fc_probs = nn.Linear(feature_dim, 1)  # (B, N_CLASSES, 1) ‚Üí –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.sigmoid = nn.Sigmoid()  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–≥–º–æ–∏–¥—É

    def forward(self, x):
        # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –í–°–ï —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —ç–Ω–∫–æ–¥–µ—Ä–∞
        encoder_output = self.encoder(x)

        # 2Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞—ë–º –í–°–ï —É—Ä–æ–≤–Ω–∏ –≤ decoder –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        segmentation_output = self.segmentation_head(self.decoder(*encoder_output))

        # 3Ô∏è‚É£ –£—Å—Ä–µ–¥–Ω—è–µ–º feature map
        pooled_features = self.pool(encoder_output[-1]).view(encoder_output[-1].shape[0], -1)  # (B, encoder_channels)

        # 4Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º class_vectors
        class_vectors = self.fc_vectors(pooled_features).view(-1, self.num_classes, self.feature_dim)  # (B, N_CLASSES, 30)

        # 5Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º class_vectors –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        class_probs = self.sigmoid(self.fc_probs(class_vectors)).squeeze(-1)  # (B, N_CLASSES)

        return segmentation_output, class_probs, class_vectors
